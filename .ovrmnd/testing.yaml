# Testing configuration for Ovrmnd CLI
# This file should be kept up to date with all YAML features
# Use: node dist/cli.js call testing.<endpoint>
# 
# Batch operations examples:
# node dist/cli.js call testing.getUser --batch-json='[{"id":"1"},{"id":"2"},{"id":"3"}]'
# node dist/cli.js call testing.getUser --batch-json='[{"id":"1"},{"id":"999"}]' --fail-fast
# node dist/cli.js call testing.listPosts --batch-json='[{"_page":"1"},{"_page":"2"}]' --pretty

serviceName: testing
baseUrl: https://jsonplaceholder.typicode.com

# Example authentication (commented out for public API)
# authentication:
#   type: bearer
#   token: ${TEST_API_TOKEN}

endpoints:
  # Basic GET endpoint with path parameter
  - name: getUser
    method: GET
    path: /users/{id}
    
  # GET endpoint returning array
  - name: listUsers
    method: GET
    path: /users
    
  # POST endpoint for testing body parameters
  - name: createUser
    method: POST
    path: /users
    headers:
      Content-Type: application/json
    
  # GET with query parameters
  - name: listPosts
    method: GET
    path: /posts
    defaultParams:
      _limit: 10
      
  # GET with multiple path parameters
  - name: getComment
    method: GET
    path: /posts/{postId}/comments/{id}
    
  # PUT endpoint for updates
  - name: updateUser
    method: PUT
    path: /users/{id}
    headers:
      Content-Type: application/json
      
  # DELETE endpoint
  - name: deleteUser
    method: DELETE
    path: /users/{id}
    
  # Example with cache TTL
  - name: getTodos
    method: GET
    path: /todos
    cacheTTL: 300  # Cache for 5 minutes
    
  # Example with field extraction
  - name: getUserSummary
    method: GET
    path: /users/{id}
    transform:
      fields: ["id", "name", "email", "address.city"]
      
  # Example with field renaming
  - name: getPost
    method: GET
    path: /posts/{id}
    transform:
      rename:
        userId: authorId
        
  # Example with multiple transformations
  - name: listUserNames
    method: GET
    path: /users
    transform:
      - fields: ["[*].id", "[*].name", "[*].username"]
      - rename:
          "[*].username": "[*].handle"
          
  # Example with nested field extraction and renaming
  - name: getUserProfile
    method: GET
    path: /users/{id}
    cacheTTL: 600
    transform:
      fields: ["id", "name", "email", "address.street", "address.city", "company.name"]
      rename:
        "company.name": "companyName"
        
  # Example endpoint ideal for batch operations
  - name: getPhoto
    method: GET
    path: /photos/{id}
    transform:
      fields: ["id", "albumId", "title", "thumbnailUrl"]

aliases:
  # Simple alias with pre-filled parameter
  - name: me
    endpoint: getUser
    args:
      id: '1'
      
  # Alias for first page of posts
  - name: recentPosts
    endpoint: listPosts
    args:
      _page: 1
      _limit: 5
      
  # Alias demonstrating multiple parameters
  - name: firstComment
    endpoint: getComment
    args:
      postId: '1'
      id: '1'
